/* Enter a unique ExecutionPlan */
@Plan:name('ProcessTraffic')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Import('timeBetweenStopsStream:1.0.0')
define stream timeTakenStream (stopId string, prevStopId string, stopIdLatitude double, stopIdLongitude double, prevStopIdLatitude double, prevStopIdLongitude double, timeStamp long, t_hour int, timeTaken long);

@Export('processedTrafficStream:1.0.0')
define stream trafficStream (id string, state string, information string, fromLng double, fromLat double, toLng double, toLat double);

@From(eventtable='rdbms', datasource.name='WSO2_GEO_DB', table.name='StopTable')
define table stopTable (name string, id string, naptan string, sequence int, line string, direction int, latitude double, longitude double);

from timeTakenStream as tts join stopTable as st
on st.id == tts.prevStopId
select tts.stopId, tts.prevStopId, tts.stopIdLatitude, tts.stopIdLongitude, tts.prevStopIdLatitude, tts.prevStopIdLongitude, tts.timeTaken, st.sequence as prevSequence
insert into #innerStreamPrev;

from #innerStreamPrev as isp join stopTable as st
on st.id == isp.stopId
select isp.stopId, isp.prevStopId, isp.stopIdLatitude, isp.stopIdLongitude, isp.prevStopIdLatitude, isp.prevStopIdLongitude, isp.timeTaken, isp.prevSequence, st.sequence as thisSequence
insert into #innerStreamThis;

from #innerStreamThis[math:abs(thisSequence - prevSequence) == 1]
select stopId, prevStopId, stopIdLatitude, stopIdLongitude, prevStopIdLatitude, prevStopIdLongitude, timeTaken
insert into #candidateTrafficStream;

from #candidateTrafficStream[timeTaken > 310000]
select prevStopId as id, "Severe" as state, "Severe Traffic" as information, prevStopIdLongitude as fromLng, prevStopIdLatitude as fromLat, stopIdLongitude as toLng, stopIdLatitude as toLat
insert into #intermTrafficStream;

from #candidateTrafficStream[timeTaken <= 310000 AND timeTaken > 160000]
select prevStopId as id, "Moderate" as state, "Moderate Traffic" as information, prevStopIdLongitude as fromLng, prevStopIdLatitude as fromLat, stopIdLongitude as toLng, stopIdLatitude as toLat
insert into #intermTrafficStream;

from #candidateTrafficStream[timeTaken <= 160000 AND timeTaken > 30000]
select prevStopId as id, "Normal" as state, "Normal Traffic" as information, prevStopIdLongitude as fromLng, prevStopIdLatitude as fromLat, stopIdLongitude as toLng, stopIdLatitude as toLat
insert into #intermTrafficStream;

from #candidateTrafficStream[timeTaken <= 30000]
select prevStopId as id, "Minimal" as state, "Minimal Traffic" as information, prevStopIdLongitude as fromLng, prevStopIdLatitude as fromLat, stopIdLongitude as toLng, stopIdLatitude as toLat
insert into #intermTrafficStream;

from every e1=#intermTrafficStream -> e2=#intermTrafficStream[e1.id == id AND e1.state != state]
select e2[0].id, e2[0].state, e2[0].information, e2[0].fromLng, e2[0].fromLat, e2[0].toLng, e2[0].toLat
insert into trafficStream;